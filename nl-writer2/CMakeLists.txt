cmake_minimum_required(VERSION 3.10)

project(NLWriter2)


set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)


option(NLW2_LIB_ORIG_HDR
	"NLW2_LIB: use original NL header comments" OFF)


set(NLW2_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(NLW2_INCLUDE_PATH ${NLW2_DIR}/include)
set(NLW2_SRC_PATH     ${NLW2_DIR}/src)
set(NLW2_EXAMPLE_PATH ${NLW2_DIR}/examples)

# NLW2 library C++ sources
set(NLW2_LIB_FILES
	${NLW2_SRC_PATH}/nl-writer2.cc
  ${NLW2_SRC_PATH}/nl-utils.cc
  ${NLW2_SRC_PATH}/dtoa.cc
	${NLW2_SRC_PATH}/nl-solver.cc
)
set(NLW2_INC_FILES
	${NLW2_INCLUDE_PATH}/mp/nl-solver-basics-c.h
	${NLW2_INCLUDE_PATH}/mp/nl-model.h
	${NLW2_INCLUDE_PATH}/mp/nl-solver.h
	${NLW2_INCLUDE_PATH}/mp/nl-solver.hpp
	${NLW2_INCLUDE_PATH}/mp/nl-feeder.h
	${NLW2_INCLUDE_PATH}/mp/nl-writer2.h
	${NLW2_INCLUDE_PATH}/mp/nl-writer2.hpp
	${NLW2_INCLUDE_PATH}/mp/nl-writer2-misc.h
  ${NLW2_INCLUDE_PATH}/mp/nl-utils.h
	${NLW2_INCLUDE_PATH}/mp/sol-reader2.h
	${NLW2_INCLUDE_PATH}/mp/sol-reader2.hpp
	${NLW2_INCLUDE_PATH}/mp/sol-handler.h
)

# Create C++ library
set(NLW2_LIB_NAME "nlw2")
add_library(${NLW2_LIB_NAME} STATIC
	${NLW2_LIB_FILES} ${NLW2_INC_FILES}
)
target_include_directories(
  ${NLW2_LIB_NAME} PUBLIC ${NLW2_INCLUDE_PATH})
if (NLW2_LIB_ORIG_HDR)
	message(STATUS
		"   NLW2_LIB: Building with the original NL header comments")
	target_compile_definitions(
		${NLW2_LIB_NAME} PUBLIC NL_LIB2_ORIG_HDR)
endif()

# C API sources
set(NLW2_C_API_LIB_FILES
	${NLW2_DIR}/src/nl-model-c.cc
	${NLW2_DIR}/src/nl-solver-c.cc
	)
set(NLW2_C_API_INC_FILES
  ${NLW2_INCLUDE_PATH}/api/c/nl-feeder-c.h
  ${NLW2_INCLUDE_PATH}/api/c/sol-handler-c.h
  ${NLW2_INCLUDE_PATH}/api/c/nl-writer2-misc-c.h
	${NLW2_INCLUDE_PATH}/api/c/nl-solver-c.h
	${NLW2_INCLUDE_PATH}/api/c/nl-model-c.h

  ${NLW2_INCLUDE_PATH}/api/c/nl-feeder-c-impl.h
  ${NLW2_INCLUDE_PATH}/api/c/sol-handler-c-impl.h
  ${NLW2_INCLUDE_PATH}/api/c/nl-writer2-misc-c-impl.h
              )

# C API library
set(NLW2_C_API_LIB_NAME "nlw2_c_api")
add_library(${NLW2_C_API_LIB_NAME} STATIC
  ${NLW2_C_API_LIB_FILES} ${NLW2_C_API_INC_FILES})
target_include_directories(
  ${NLW2_C_API_LIB_NAME} PUBLIC ${NLW2_INCLUDE_PATH})
target_link_libraries(${NLW2_C_API_LIB_NAME} ${NLW2_LIB_NAME})

######################################################
# Examples

# C++ NLSolver "easy interface" example: MIQP
set(NLW2_CPP_EXAMPLE_PATH ${NLW2_EXAMPLE_PATH}/cpp)
set(NLSOL_CPP_EX_EASY1_FILES
	${NLW2_CPP_EXAMPLE_PATH}/easyAPI_1_MIQP/nlsol_ex_easy_api.cc)

# NLW2 C++ full-API example
set(NLSOL_CPP_EX_FULL1_FILES
	${NLW2_CPP_EXAMPLE_PATH}/fullAPI_1/nlsol_ex.cc
	${NLW2_CPP_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_mdl.h
	${NLW2_CPP_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_nl.h
	${NLW2_CPP_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_sol.h)

# NLW2 C easyAPI example
set(NLW2_C_EXAMPLE_PATH ${NLW2_EXAMPLE_PATH}/c)
set(NLSOL_C_EX_EASY1_FILES
	${NLW2_C_EXAMPLE_PATH}/easyAPI_1_MILP/nlsol_ex_easy_api_c.c
	)

# NLW2 C fullAPI example
set(NLSOL_C_EX_FULL1_FILES
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c.c
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_model.h
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_model.c
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_nl.h
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_nl.c
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_sol.h
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_sol.c
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_nlutils.h
	${NLW2_C_EXAMPLE_PATH}/fullAPI_1/nlsol_ex_c_nlutils.c
  )

option(BUILD_EXAMPLES_NLW2
  "Build NLW2 examples (library not affected). Assumes nl-opcodes.h (generated by MP)"
  ON)
if (BUILD_EXAMPLES_NLW2)         # Actually build the example
  message(STATUS
    "NLW2_LIB: building NLWriter2 examples. Set -DBUILD_EXAMPLES_NLW2=off to switch off.")

	add_executable(nlw-ex-easy-api-cpp ${NLSOL_CPP_EX_EASY1_FILES})
	target_include_directories(nlw-ex-easy-api-cpp PUBLIC
		${NLW2_INCLUDE_PATH})
	target_link_libraries(nlw-ex-easy-api-cpp ${NLW2_LIB_NAME})

	add_executable(nlw-ex-full-api-cpp ${NLSOL_CPP_EX_FULL1_FILES})
	target_include_directories(nlw-ex-full-api-cpp PUBLIC
		${NLW2_INCLUDE_PATH})
	target_link_libraries(nlw-ex-full-api-cpp ${NLW2_LIB_NAME})

	add_executable(nlw-ex-easy-api-c ${NLSOL_C_EX_EASY1_FILES})
	target_include_directories(nlw-ex-easy-api-c PUBLIC
		${NLW2_INCLUDE_PATH})
	target_link_libraries(nlw-ex-easy-api-c ${NLW2_C_API_LIB_NAME})

	add_executable(nlw-ex-full-api-c ${NLSOL_C_EX_FULL1_FILES})
	target_include_directories(nlw-ex-full-api-c PUBLIC
    ${NLW2_INCLUDE_PATH})
	target_link_libraries(nlw-ex-full-api-c ${NLW2_C_API_LIB_NAME})
endif()


##################################################################
# Export library include path
set(NLW2_INCLUDE_PATH ${NLW2_INCLUDE_PATH} PARENT_SCOPE)
# Export source files, e.g., for docu
set(NLW2_SRC
  ${NLW2_INC_FILES} ${NLW2_C_API_INC_FILES} PARENT_SCOPE)
# Export library target names
set(NLW2_LIB_NAME ${NLW2_LIB_NAME} PARENT_SCOPE)
set(NLW2_C_API_LIB_NAME ${NLW2_C_API_LIB_NAME} PARENT_SCOPE)
